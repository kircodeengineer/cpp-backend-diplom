stages:
  - build
  - release
  - deploy
  
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script:
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/cpp-backend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true

release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/cpp-backend:$CI_COMMIT_SHA $VERSION

deploy:
  stage: deploy
  environment:
    name: production
    url: http://std-ext-015-43.praktikum-services.tech:89/
  resource_group: production-frontend
  image: docker:24.0.7-alpine3.19
  before_script:
    - apk add docker-cli-compose openssh-client bash
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan ${DEV_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - docker context create remote --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
  script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker --context remote rm -f http_server || true
    - docker --context remote rm -f postgres || true
    - docker --context remote compose up -d --force-recreate
